{
    "tasks": [
        {
            "type": "cppbuild",
            "label": "C/C++: gcc build active file",
            "command": "/usr/bin/g++",
            "args": [
                "-fdiagnostics-color=always",
                "-g",
                "${workspaceFolder}/test.cpp",
                "-o",
                "${workspaceFolder}/build/sample"
            ],
            "options": {
                "cwd": "${fileDirname}"
            },
            "problemMatcher": [
                "$gcc"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "detail": "Task generated by Debugger."
        }
    ],
    "version": "2.0.0"
}

/*
你可以使用快捷键（如 Ctrl+Shift+B）来触发 VS Code 的构建任务，自动编译你的代码。编译完成后，你需要手动运行可执行文件来查看输出。

对于 launch.json 和 tasks.json 的配置，这取决于你的项目结构和你想如何编译它们：

如果每个 .cpp 文件都是独立的程序，你将需要为每一个程序创建一个新的任务或者调试配置。这意味着，每当你添加一个新的 .cpp 文件，你都需要修改 tasks.json 和 launch.json 来包含这个新文件的编译和调试设置。

如果所有的 .cpp 文件属于同一个项目（即它们一起被编译为一个单一的可执行文件），你不需要为每个文件单独配置。
你只需确保你的构建系统（Makefile、CMake或者是直接在 tasks.json 中使用 g++）能够找到并编译所有的 .cpp 文件。例如，如果你使用 Makefile，只需更新 Makefile，而不是 tasks.json 或 launch.json。

对于中等大小的项目，通常会有一个或几个入口点（包含 main 函数的 .cpp 文件），其余的 .cpp 文件会被编译成对象文件并链接到主程序中。在这种情况下，你只需要在 tasks.json 中指定入口点 .cpp 文件的编译任务，并在 launch.json 中设置入口点可执行文件的调试配置。

为了避免重复编辑配置文件，你可以写更通用的任务和调试配置，或者使用外部构建系统来管理这些任务，这样就不需要为每个新的 .cpp 文件修改配置了。

*/